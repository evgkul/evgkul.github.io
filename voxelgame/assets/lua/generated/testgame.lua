--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____game_ecs = require("game_ecs")
local WorldDef = ____game_ecs.WorldDef
local worlds = ____game_ecs.worlds
local ____testgraphics = require("testgraphics")
local buildAtlas = ____testgraphics.buildAtlas
local ____worldgen = require("worldgen")
local genWorld = ____worldgen.genWorld
local function registerBlocks(self)
    local t = gamedata:newBlockdataBuilder("planks")
    t:solid()
    t:setTexture("planks")
    t:build(1)
    t = gamedata:newBlockdataBuilder("smile")
    t:solid()
    t:setTexture("smile")
    t:setEmission(15)
    t:build(2)
    t = gamedata:newBlockdataBuilder("testblock")
    t:solid()
    t:setTexture("test")
    t:setOpacity(5)
    t:setEmission(0, 15, 0)
    t:build(3)
    t = gamedata:newBlockdataBuilder("rocks")
    t:solid()
    t:setTexture("rocks")
    t:build(4)
    t = gamedata:newBlockdataBuilder("glass")
    t:solid()
    t:setOpacity(0)
    t:setPass("alphaclip")
    t:setTransparent(true)
    t:setTexture("glass")
    t:build()
    t = gamedata:newBlockdataBuilder("glass_red")
    t:solid()
    t:setOpacity(0, 15, 15, 7)
    t:setPass("alpha")
    t:setTransparent(true)
    t:setTexture("glass_red")
    t:build()
    t = gamedata:newBlockdataBuilder("glass_green")
    t:solid()
    t:setOpacity(15, 0, 15, 7)
    t:setPass("alpha")
    t:setTransparent(true)
    t:setTexture("glass_green")
    t:build()
    t = gamedata:newBlockdataBuilder("glass_blue")
    t:solid()
    t:setOpacity(15, 15, 0, 7)
    t:setPass("alpha")
    t:setTransparent(true)
    t:setTexture("glass_blue")
    t:build()
    t = gamedata:newBlockdataBuilder("dirt")
    t:solid()
    t:setTexture("dirt")
    t:build()
    t = gamedata:newBlockdataBuilder("grass")
    t:solid()
    t:setTexture("grass_top")
    t:setTextureSide(3, "dirt")
    t:build()
end
function ____exports.initialize(self)
    log_info("Started atlas creation")
    local atlas = buildAtlas(nil)
    log_info("Atlas build!")
    log_info("Started block registration")
    registerBlocks(nil)
    log_info("Blocks registered")
    local world = newChunkWorld()
    worlds.test = __TS__New(WorldDef, world)
    genWorld(nil, world)
    return {world = world}
end
return ____exports
